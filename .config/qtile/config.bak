
from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

import os
import subprocess




mod = "mod4"
terminal = "kitty"
border = ""


barbackground = "#000530"
darkblue = "#000A61"
cian = "#53B1FA"
pink = "#c678dd"
thistle = "#a9a1e1"
grey = "#282c34"

keys = [
    Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),
    Key([mod, "control"], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),
    
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack",
    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
    Key([mod], "f", lazy.spawn("firefox"), desc="browser"),
    Key([mod], "b", lazy.spawn("burpsuite"), desc="burpsuite"),
    Key([mod], "m", lazy.spawn("rofi -show drun"), desc="file explorer"),
    Key([mod], "e", lazy.spawn("thunar"), desc="thunar"),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "w", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),


    Key([mod], "Right", lazy.group.next_group()),
    Key([mod], "Left", lazy.group.prev_group()),
]

groups = [Group(i) for i in [ "","","","","","" ]]

for i, group in enumerate(groups):
    n_escritorio = str(i+1)
    keys.extend(
        [
            
            Key(
                [mod],
                n_escritorio,
                lazy.group[group.name].toscreen(),
            ),


            Key(
                [mod, "shift"],
                n_escritorio,
                lazy.window.togroup(group.name, switch_group=False),
            ),

            
        ]
    )

layouts = [
    layout.Columns(border_normal = barbackground, border_focus = cian, border_width = 3, margin = 7),
    layout.Max(),
]

widget_defaults = dict(
    font = "sans",
    fontsize = 15,
    padding_y = 5,
    padding_x = 10,
    background = barbackground,
    
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
             widget.GroupBox(
                       fontsize = 43,
                       margin_x = 10,
                       highlight_method = "block",
                       background = thistle,
                       ),

             widget.Sep(
                       background = barbackground,
                       foreground = barbackground,
                       linewidth = 100, 
                       ),

             widget.TaskList(
                       icon_size = 25, 
                       max_title_width = 130,
                       highlight_method = "block",
                       border = pink,
                       foreground = barbackground,
                       ),
             widget.TextBox(
                       fmt = border,
                       foreground = pink,
                       fontsize = 30,
                       padding = 0,
                       ),

             widget.Net(
                       interface = "ens33",
                       format = '{down} ↓↑ {up}',
                       foreground = grey,
                       background = pink,
                       padding = 5
                       ),


             widget.TextBox(
                       fmt = border,
                       foreground = thistle,
                       background = pink,
                       fontsize = 40,
                       padding = 0,
                       ),

             widget.Clock(
                       foreground = grey,
                       background = thistle,
                       format = "%A, %B %d - %H:%M "
                       ),


            ],
            30,
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

auto_minimize = True

wl_input_rules = None






@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~/.config/qtile/autostart.sh')
    subprocess.Popen([home])

wmname = "LG3D"





